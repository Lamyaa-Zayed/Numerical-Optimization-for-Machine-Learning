# -*- coding: utf-8 -*-
"""LamyaaZayed_Find parameters.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ovVuvj56_XCTF10GotNzTnUaSdPXcOWQ

•  If we have the data points (x_points, y_points) with 
x_points = [1,1,2,3,4,5,6,7,8,9,10,11] 
and y_points = [1,2,3,1,4,5,6,4,7,10,15,9], 
use the GD algorithm to find the best values for theta0 and theta1 
(having y = theta0 + theta1*x the equation of a line that should fit the data 
points).
•  Explore the following to be ready for the practical session (write simple 
example for each one to demonstrate your ability to use it):
•  How to import NumPy library.
•  Matrices and vectors operations using NumPy.
•  How to import matplotlib.pyplot.
•  How to make matplotlib inline.
•  How to read data from csv file to NumPy array.
•  How to select a specific column from NumPy array (very important).
•  Using Matplotlib Scatter plot to plot (x,y) data.
•  Using Matplotlib to plot a straight line.
•  Using r2 score from sklearn.metrics to evaluate prediction performance.
"""

#How to import NumPy library.
#How to import matplotlib.pyplot

import numpy as np
import matplotlib.pyplot as plt

#Matrices and vectors operations using NumPy

matrix_A = np.array([[1,2,3],[4,5,6],[7,8,9]])
vector_A = np.array([10,11,12])
print("The matrix A: " , matrix_A)
print("The vector A: " , vector_A)

#Using Matplotlib Scatter plot to plot (x,y) data.

x_points = [1,1,2,3,4,5,6,7,8,9,10,11]
y_points = [1,2,3,1,4,5,6,4,7,10,15,9]
#x = np.array([1, 3, 5, 7, 9])
#y = np.array([1, 5, 3, 2, 4])
fig = plt.figure()
ax = fig.add_subplot(2, 2, 2)
#ax.scatter(x, y)
ax.scatter(x_points, y_points)

#Using Matplotlib to plot a straight line

x_points = [1,3,5,7,9,11,13,15]
y_points = [1,3,5,7,9,11,13,15]
plt.plot(x_points, y_points,)
plt.axis([0, 15, 0, 15])
plt.show()

#How to make matplotlib inline

x = np.linspace(0, 10, 100)

plt.plot(x, np.sin(x))
plt.plot(x, np.cos(x))

plt.show()

#to upload csv file

from google.colab import files
uploaded = files.upload()

#How to read data from csv file to NumPy array

from numpy import genfromtxt

my_data = genfromtxt('categories.csv', delimiter=',')

#How to select a specific column from NumPy array

matrix_A = np.array([[1,2,3],[4,5,6],[7,8,9]])
print(matrix_A[:,1])  #select first column

#Using r2 score from sklearn.metrics to evaluate prediction performance.

from sklearn.metrics import accuracy_score

y_pred = [0, 2, 1, 3]
y_true = [0, 1, 2, 3]
print(accuracy_score(y_true, y_pred))
print(accuracy_score(y_true, y_pred, normalize=False))

#use the GD algorithm to find the best values for theta0 and theta1 having "y = theta0 + theta1*x" the equation of a line that should fit the data points

x_points = np.array([[1,2],[3,5]])
y_points = np.array([[1,3],[4,5]])
theta0_history = []
theta1_history = []
J_history = []

def compute_cost(x_points, y_points, theta=np.array([[0],[0]])):
    m = len(y_points)
    J=0 # initialize loss to zero
    #theta=theta.reshape(2,1)
    h_x = np.dot(x_points,theta)
    error_term = sum((h_x - y_points)**2)
    loss = error_term/(2*m)
    return loss 

def gradient_descent(x_points, y_points, theta=np.array([[0],[0]]), alpha=0.01, num_iterations=1500):
    m = len(y_points)
    #theta = theta.reshape(2,1)
    
    for i in range(num_iterations):
        error = (np.dot(x_points, theta) - y_points)
        
        term0 = (alpha/m) * sum(error* (x_points[:,0].reshape(m,1)))
        term1 = (alpha/m) * sum(error* (x_points[:,1].reshape(m,1)))
        
        # update theta
        term_vector = np.array([[term0],[term1]])
        #print(term_vector)
        theta = theta - term_vector#.reshape(2,1)
        
        # store history values
        theta0_history.append(theta[0].tolist()[0])
        theta1_history.append(theta[1].tolist()[0])
        J_history.append(compute_cost(X,y,theta).tolist()[0])
        
    return (theta, J_history, theta0_history, theta1_history)


gradient_descent(x_points, y_points)